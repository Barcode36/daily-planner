/*
 * This file is generated by jOOQ.
 */
package by.gsu.domain.tables;


import by.gsu.domain.DefaultSchema;
import by.gsu.domain.Keys;
import by.gsu.domain.tables.records.NoteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Note extends TableImpl<NoteRecord> {

    private static final long serialVersionUID = -2077802466;

    /**
     * The reference instance of <code>note</code>
     */
    public static final Note NOTE = new Note();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoteRecord> getRecordType() {
        return NoteRecord.class;
    }

    /**
     * The column <code>note.id</code>.
     */
    public final TableField<NoteRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>note.name</code>.
     */
    public final TableField<NoteRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>note.shortDescription</code>.
     */
    public final TableField<NoteRecord, String> SHORTDESCRIPTION = createField("shortDescription", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>note.startDate</code>.
     */
    public final TableField<NoteRecord, String> STARTDATE = createField("startDate", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>note.endDate</code>.
     */
    public final TableField<NoteRecord, String> ENDDATE = createField("endDate", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>note</code> table reference
     */
    public Note() {
        this(DSL.name("note"), null);
    }

    /**
     * Create an aliased <code>note</code> table reference
     */
    public Note(String alias) {
        this(DSL.name(alias), NOTE);
    }

    /**
     * Create an aliased <code>note</code> table reference
     */
    public Note(Name alias) {
        this(alias, NOTE);
    }

    private Note(Name alias, Table<NoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Note(Name alias, Table<NoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Note(Table<O> child, ForeignKey<O, NoteRecord> key) {
        super(child, key, NOTE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<NoteRecord, Integer> getIdentity() {
        return Keys.IDENTITY_NOTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NoteRecord> getPrimaryKey() {
        return Keys.PK_NOTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NoteRecord>> getKeys() {
        return Arrays.<UniqueKey<NoteRecord>>asList(Keys.PK_NOTE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Note as(String alias) {
        return new Note(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Note as(Name alias) {
        return new Note(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Note rename(String name) {
        return new Note(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Note rename(Name name) {
        return new Note(name, null);
    }
}
